{"version":3,"file":"static/js/638.43d59ca0.chunk.js","mappings":"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","sources":["components/University/CourseCard.js","components/University/CourseLists.js","pages/University.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport SelectSearch from \"react-select-search\";\n\nfunction CourseCard({ courseData, uniId, levelId, selectionName }) {\n  const [options, setOptions] = useState();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (courseData.intake?.length) {\n      // const options = [{ value: \"\", name: \"\" }];\n      const date = new Date();\n      const currentYr = date.getFullYear();\n      const options = courseData.intake.map((option) => {\n        const months = {\n          jan: 1,\n          feb: 2,\n          mar: 3,\n          apr: 4,\n          may: 5,\n          jun: 6,\n          jul: 7,\n          aug: 8,\n          sep: 9,\n          oct: 10,\n          nov: 11,\n          dec: 12,\n        };\n        // option.intake_month;\n        const currentMonth = option.intake_month.split(\"-\");\n        // console.log(currentMonth);\n        // console.log(currentMonth[1]);\n        // console.log(\n        //   \"data is\",\n        //   date.getMonth() + 1 <= months[currentMonth[1].toLowerCase()]\n        // );\n        if (currentYr === option.intake_year) {\n          if (\n            date.getMonth() + 1 <= months[currentMonth[1].toLowerCase()] &&\n            currentYr === option.intake_year\n          ) {\n            return {\n              value: option.id,\n              name: option.intake_month + \" \" + option.intake_year,\n            };\n          } else if (\n            date.getMonth() + 1 <= months[currentMonth[1].toLowerCase()] &&\n            currentYr !== option.intake_year\n          ) {\n            return {\n              value: option.id,\n              name: option.intake_month + \" \" + option.intake_year,\n            };\n          }\n        } else if (currentYr < option.intake_year) {\n          return {\n            value: option.id,\n            name: option.intake_month + \" \" + option.intake_year,\n          };\n        }\n        // return false;\n      });\n      const data = (\n        <div className=\"courseCardSelect\">\n          <SelectSearch\n            placeholder=\"Select Intake\"\n            options={options}\n            value=\"\"\n            onChange={goToEnqPage}\n            name={selectionName}\n          />\n        </div>\n      );\n      setOptions(data);\n    } else {\n      const options = <p className=\"dengor\">No intake found for this course</p>;\n      setOptions(options);\n    }\n  }, [courseData.intake]);\n\n  const goToEnqPage = function (intake) {\n    // console.log(intake);\n    navigate(\"/enquiry/create\", {\n      state: {\n        uniId,\n        courseId: courseData.id,\n        levelId,\n        intake,\n      },\n    });\n  };\n  return (\n    <div className=\"col-md-4 text-center mb-3\">\n      <div className=\"card courseCard\">\n        {courseData.img ? (\n          <img\n            src={courseData.img}\n            className=\"card-img-top\"\n            alt={courseData.course_name}\n          />\n        ) : (\n          \"\"\n        )}\n        <div className=\"card-body\">\n          <h5 className=\"card-title mb-3\">{courseData.course_name}</h5>\n          {options}\n          {/* <SelectSearch\n            options={options}\n            // value={props.value}\n            // onChange={props.onChange}\n            // name={props.name}\n          /> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CourseCard;\n","import React, { useEffect, useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { ajaxCallWithHeaderOnly } from \"../../helpers/ajaxCall\";\nimport { useSelector } from \"react-redux\";\nimport CourseCard from \"./CourseCard\";\nimport LoadingData from \"../UI/LoadingData\";\n\nfunction CourseLists(props) {\n  const [searchCourse, setSearchCourse] = useState();\n  const [courseData, setCourseData] = useState({\n    totalCourse: null,\n    img: null,\n    courses: [],\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [throwErr, setThrowErr] = useState(null);\n  const authData = useSelector((state) => state.authStore);\n  useEffect(() => {\n    if (throwErr) throw throwErr;\n  }, [throwErr]);\n  const getData = async function () {\n    console.log(\"i am inside\");\n    setIsLoading(true);\n    let courseUrl = `uni-retrieve/${props.uniId}/?level=${props.courseLevel}`;\n    if (searchCourse?.length) courseUrl += `&course_name=${searchCourse}`;\n    const response = await ajaxCallWithHeaderOnly(\n      `${courseUrl}`,\n      {\n        Authorization: `Bearer ${authData.accessToken}`,\n      },\n      \"POST\",\n      null\n    );\n    console.log(response);\n    if (response?.isNetwork) {\n      setThrowErr({ ...response, page: \"enquiries\" });\n      return;\n    }\n    if (response?.status && response?.status === 401) {\n      setThrowErr({ ...response, page: \"enquiries\" });\n      return;\n    }\n    if (response?.status) {\n      setThrowErr({ ...response, page: \"enquiries\" });\n      return;\n    }\n\n    // const data = response.results.map((data) => {\n    //   return {\n    //     ...data,\n    //     uniId: data?.id,\n    //     univ: data?.course_name,\n    //     uniId: data?.university?.id,\n    //     uniName: data?.university?.univ_name,\n    //   };\n    // });\n    setCourseData({\n      totalCourse: response?.university_count,\n      img: response?.univ_logo,\n      courses: response?.courses,\n    });\n\n    setIsLoading(false);\n  };\n  // load courses\n  useEffect(() => {\n    getData();\n  }, [searchCourse]);\n\n  console.log(courseData);\n  return (\n    <>\n      <div className=\"row\">\n        <Form.Group className=\"mb-3 col-md-4\" controlId=\"courseSearch\">\n          <Form.Control\n            type=\"text\"\n            name=\"courseSearch\"\n            placeholder=\"Search Courses\"\n            value={searchCourse}\n            onChange={(e) => setSearchCourse(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"col-md-8 text-right\">\n          <button className=\"btn btn-primary\" onClick={props.goToCourse}>\n            Go to University List\n          </button>\n        </div>\n      </div>\n      <div className=\"row\">\n        {isLoading ? (\n          <div className=\"col-md-12 text-center\">\n            <LoadingData />\n          </div>\n        ) : courseData.courses?.length ? (\n          courseData.courses.map((course) => (\n            <CourseCard\n              courseData={course}\n              uniId={props.uniId}\n              levelId={props.courseLevel}\n              selectionName={course.id}\n              key={course.id}\n            />\n          ))\n        ) : (\n          <h2 className=\"text-center\">No Courses Found</h2>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default CourseLists;\n","import React, { useEffect, useReducer, useRef, useState } from \"react\";\nimport {\n  Form,\n  InputGroup,\n  OverlayTrigger,\n  Popover,\n  ProgressBar,\n} from \"react-bootstrap\";\nimport SelectionBox from \"../components/UI/Form/SelectionBox\";\nimport LoaderUni from \"../components/UI/Layouts/LoaderUni\";\nimport { ajaxCallWithHeaderOnly } from \"../helpers/ajaxCall\";\nimport { useSelector } from \"react-redux\";\nimport DataTable from \"react-data-table-component\";\nimport LoadingData from \"../components/UI/LoadingData\";\nimport { useNavigate } from \"react-router-dom\";\nimport CourseLists from \"../components/University/CourseLists\";\n// import CourseLists from \"../components/University/CourseLists\";\n\nfunction University() {\n  const [throwErr, setThrowErr] = useState(null);\n  const [uniData, setUniData] = useState([]);\n  const [searchUni, setSearchUni] = useState(\"\");\n  const [isUniLoadingData, setIsUniLoadingData] = useState(false);\n\n  // for pagination\n  const [pageNo, setPageNo] = useState(1);\n  const [perPage, setPerPage] = useState(10);\n  const [totalRows, setTotalRows] = useState(0);\n\n  // for go to courses\n  const [loadCourse, setLoadCourse] = useState({\n    loadCourse: false,\n    uniId: -1,\n  });\n\n  const handlePerRowsChange = (newPerPage, page) => {\n    // console.log(\"per row is changed and data is\", newPerPage, page);\n    setPerPage(newPerPage);\n    setPageNo(page);\n    setUniData([]);\n  };\n  // pagination over\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (throwErr) throw throwErr;\n  }, [throwErr]);\n  const authData = useSelector((state) => state.authStore);\n  const filter = useRef();\n\n  const goToCoursePage = function (uniId, courseType) {\n    setLoadCourse({ loadCourse: true, uniId, type: courseType });\n    console.log(\"time to load courses\");\n    // navigate(\"/enquiry/create\", {\n    //   state: {\n    //     uniId,\n    //   },\n    // });\n  };\n  // const isAll = uniState.ielts || uniState.ielts || uniState.ielts;\n  const uniColumns = [\n    {\n      name: \"University Name\",\n      selector: (row) => row.univ_name,\n      sortable: true,\n    },\n    {\n      name: \"Action\",\n      selector: (row) => (\n        <>\n          <span\n            className=\"btn-primary btn mb-3 noMPC\"\n            onClick={() => {\n              goToCoursePage(row.id, 2);\n            }}\n          >\n            Apply For UG Course\n          </span>\n          <span\n            className=\"btn-primary btn mb-3 ml30 noMmob\"\n            onClick={() => {\n              goToCoursePage(row.id, 1);\n            }}\n          >\n            Apply For PG Course\n          </span>\n        </>\n      ),\n    },\n  ];\n  const getData = async function () {\n    setIsUniLoadingData(true);\n    let courseUrl = `get/unilistapply/?p=${pageNo}&records=${perPage}`;\n    if (searchUni?.length) courseUrl += `&search=${searchUni}`;\n    const response = await ajaxCallWithHeaderOnly(\n      `${courseUrl}`,\n      {\n        Authorization: `Bearer ${authData.accessToken}`,\n      },\n      \"POST\",\n      null\n    );\n    console.log(response);\n    if (response?.isNetwork) {\n      setThrowErr({ ...response, page: \"enquiries\" });\n      return;\n    }\n    if (response?.status === 401) {\n      setThrowErr({ ...response, page: \"enquiries\" });\n      return;\n    }\n    if (response?.status) {\n      setThrowErr({ ...response, page: \"enquiries\" });\n      return;\n    }\n    if (response?.results?.length > 0) {\n      // const data = response.results.map((data) => {\n      //   return {\n      //     ...data,\n      //     uniId: data?.id,\n      //     univ: data?.course_name,\n      //     uniId: data?.university?.id,\n      //     uniName: data?.university?.univ_name,\n      //   };\n      // });\n      setTotalRows(response.count);\n      setUniData(response?.results);\n    } else {\n      setTotalRows(0);\n      setUniData([]);\n    }\n    setIsUniLoadingData(false);\n  };\n\n  useEffect(() => {\n    try {\n      getData();\n    } catch (e) {\n      setThrowErr({ e, page: \"enquiries\" });\n      return;\n    }\n  }, [perPage, pageNo, searchUni]);\n  return (\n    <div className=\"row layout-spacing\">\n      <div className=\"neumorphism-box nmb\">\n        <div className=\"col-lg-12\">\n          {loadCourse.loadCourse ? (\n            <CourseLists\n              uniId={loadCourse.uniId}\n              courseLevel={loadCourse.type}\n              goToCourse={() => {\n                setLoadCourse({ loadCourse: false, uniId: -1, type: -1 });\n              }}\n            />\n          ) : (\n            <>\n              <Form.Group className=\"mb-3 col-md-4\" controlId=\"uniSearch\">\n                <Form.Control\n                  type=\"text\"\n                  name=\"uniSearch\"\n                  placeholder=\"Search University\"\n                  value={searchUni}\n                  onChange={(e) => setSearchUni(e.target.value)}\n                />\n              </Form.Group>\n              <DataTable\n                onChangePage={(page) => {\n                  // console.log(\"new Page numbner is\", page);\n                  setPageNo(page);\n                  setUniData([]);\n                }}\n                columns={uniColumns}\n                data={uniData}\n                onChangeRowsPerPage={handlePerRowsChange}\n                pagination\n                paginationServer\n                progressPending={isUniLoadingData}\n                progressComponent={\n                  <LoadingData className=\"loading-spinner-flex\" />\n                }\n                paginationTotalRows={totalRows}\n              />\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default University;\n"],"names":["_ref","courseData","uniId","levelId","selectionName","_useState","useState","_useState2","_slicedToArray","options","setOptions","navigate","useNavigate","useEffect","_courseData$intake","intake","length","date","Date","currentYr","getFullYear","map","option","months","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","currentMonth","intake_month","split","intake_year","getMonth","toLowerCase","value","id","name","data","_jsx","className","children","SelectSearch","placeholder","onChange","goToEnqPage","state","courseId","_jsxs","img","src","alt","course_name","props","_courseData$courses","searchCourse","setSearchCourse","_useState3","totalCourse","courses","_useState4","setCourseData","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","throwErr","setThrowErr","authData","useSelector","authStore","getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","courseUrl","response","wrap","_context","prev","next","console","log","concat","courseLevel","ajaxCallWithHeaderOnly","Authorization","accessToken","sent","isNetwork","_objectSpread","page","abrupt","status","university_count","univ_logo","stop","apply","arguments","_Fragment","Form","controlId","type","e","target","onClick","goToCourse","LoadingData","course","CourseCard","uniData","setUniData","searchUni","setSearchUni","isUniLoadingData","setIsUniLoadingData","_useState9","_useState10","pageNo","setPageNo","_useState11","_useState12","perPage","setPerPage","_useState13","_useState14","totalRows","setTotalRows","_useState15","loadCourse","_useState16","setLoadCourse","goToCoursePage","useRef","courseType","uniColumns","selector","row","univ_name","sortable","_response$results","results","count","CourseLists","DataTable","onChangePage","columns","onChangeRowsPerPage","newPerPage","pagination","paginationServer","progressPending","progressComponent","paginationTotalRows"],"sourceRoot":""}